\chapter{検証}
\label{evaluation}
本章では，第\ref{assumption}章で述べたユーザ特定手法をそれぞれ検証する．
また，検証に利用した情報を統合することによる脅威について述べる．
\section{パケットのヘッダ情報}
パケットのヘッダ情報を利用することでどこまでホストを識別可能なのかを検
証する．取得する情報は主に5タプルと呼ばれる，送信先・受信元IPアドレス，
送信先・受信元ポート番号，プロトコルである．
\label{evaluation:pakect}
\subsection{検証手法}
\label{evaluation:packet:meth}
ネットワークにおいてホストを正確に識別可能かの検証を行う．事前に
ターゲットユーザに同意を得てMACアドレスを取得する．ホスト識別にあたり，
MACアドレスを使用しない．しかし，検証時にホスト識別の正誤判定に利用する．
また，ターゲットホストのプロファイル情報をホスト利用者に提記することで，
検証する．

検証手法の評価は，ホストを分類・識別の精度とする．そして，どのような条
件下でホスト識別が可能なのか，もしくは取得に失敗した原因を究明する．こ
こでは，ホストに対するプロファイル作成を行い，過去のプロファイルした情
報と合致した場合，同じホストであると判断する．

\subsection{ホスト識別システム}
ネットワークのトラフィックから各ユーザの送受信するパケット情報と接続
位置や利用時間など情報を分析することで，ホストを識別する．ホストに関す
る情報は，ネットワークの中継地点に本研究を用いたトラフィック監視装置を
設置することで，定常的に収集する．そのため，本システムの利用者は対象ネッ
トワークの通信を監視する権限保有者，もしくはネットワーク管理者から許可
されたユーザである．

\begin{figure}
    \begin{center}
      \includegraphics[scale=0.65]{./pdf/system_model}
      \caption{システムの動作概要}
      \label{fig:user_model}
    \end{center}
\end{figure}

システムの動作概要を図\ref{fig:user_model}に示す．ユーザのAliceは，本シ
ステムにおいてホストAとして推定されて，扱われる．そこで，ホストAから推
測できる情報を利用してプロファイルを作成する．このプロファイル情報をも
とに，ホストはトラフィックから位置情報やホスト情報などの情報を取得し，
データベースに格納する．しかし，ホスト識別に利用する情報は，ホストの特
徴やふるまいから作成されるため，Bobのような複数にまたがるホストも想定す
る．その場合は，定期的にホスト間同士で共通事項を探索し，発見した場合
は該当するホスト情報を統合する．

\subsection{設計概要}
本システムはネットワークの中継地点にトラフィック監視装置を設置し，
定常的にパケットのヘッダ情報を収集することで，ホストを識別する．
ホストを識別する本システムは，大きく2つの動作に分けられる．
IPアドレスからホストを判定する{\bf IP判定モジュール}，ホスト上のアプリケーションの動作からホストを分類する
{\bf 解析モジュール}である．ホスト識別手法の設計を図\ref{fig:tree}に記す．

\begin{enumerate}
\item{{\bf IPアドレス判定モジュール}}\\
  　IPアドレス判定モジュールは，パケットのIPアドレスを基に，ホストを推
  定する．ネットワークのDHCPリースタイム時間内に該当するIPアドレスはす
  べて同じホストであると判断する．しかし，DHCPリースタイム時間内に該当
  するIPアドレスから通信がなかった場合は，そのホストはネットワークから
  離れたものとする．
\item{{\bf パターン解析モジュール}}\\
  　ホスト上のアプリケーションの動作からホストを分類する．このモジュー
  ルは状況に応じて複数個作成する．また各モジュールごとにパターンを解析
  するアルゴリズムは変化する．例えば，メールサーバにアクセスする頻度や
  回数をユーザを分類するための識別要素とする．
\end{enumerate} 

各モジュールで類似するホストを発見した場合，ホストが保有する情報は
該当するホストの情報に統合される．そして，これらのモジュールによっ
て新規ホストが既存のホスト情報とマッチしなかった場合にはじめて，新たな
ホストが作成される．これら一覧の作業を繰り返することによって，ホストを識別する．

\begin{figure}
    \begin{center}
      \includegraphics[scale=0.65]{./pdf/tree}
%      \vspace{-5mm}
      \caption{ホスト識別手法の設計}
      \label{fig:tree}
    \end{center}
\end{figure}

本システムの要件に対する充足度について述べる．本システムは，ネッ
トワークの中継地点に設置するだけでホスト識別が可能になるため，管理者に
よる運用が容易である．次に，ホスト識別の精度に関しては，本人と推測でき
る情報を多数組み合わせることによって精度の向上を図る．そして，定常的に情
報を収集し，リアルタイムにホストを識別をすることができる．また，
本システムは大規模ネットワークの上流で利用するため，ネットワーク上すべての
ホストを対象とすることから，ユーザの網羅性はあると言える．また，モジュー
ルの追加が容易である．


\subsection{ホスト識別に用いる情報}
\label{sec:識別情報} 
ホストの識別に用いる情報は，ホストを推定できる情報である．
推定に利用する情報は第\ref{assumption:used}節で述べた以下の情報を利用する．

\begin{itemize}
\item{\bf 送信先IPアドレスとポート番号の組み合わせ}\\
  　送信先IPアドレスとポート番号の組み合わせを調査する．利用するプロト
  コルはSSH，IMAP,VPN,IRCに限定する．このプロトコルで3回以上同じホスト
  に対して通信が行われた場合，識別要素としてリストに加える．

\item{\bf 発信元ポート番号}\\
  　ホストの発信元ポート番号からOSを特定する識別とする．前述したように
  利用している送信元ポート番号からOSの種類をおおまかではあるが分類する
  ことができる．IPアドレスが付与されて1分間，対象ホストの発信元ポート
  番号を記録する．次に，発信元ポートが1024-5000か，49152-65535どちらの
  範囲に近いかを判定し，識別要素の一部とする．また，ホストが休止状態から
  復旧した場合，連続したポート番号を利用するため，ホスト毎に最後に利用したポート
  番号を記憶する．
\item{\bf パケットの発信タイミング}\\
  　パケットの発信タイミングによって，OS情報を得ることができる．ホスト
  を起動してIPアドレスが付与されてから2分間取得し，マルチキャストを除い
  たTCPの通信が最初に発生するタイミングを計測する．Windowsの場合, IPア
  ドレスが付与されてから30秒内にTCPによるUpdate確認の通信が発生すること
  が確認されているため，判別が可能である．また，IPアドレスが付与されて
  から5秒以内に数十のTCPパケットが発信された場合，そのホストは，休止状
  態からの復旧，もしくはの電源をいれたままネットワークを移動したと判断
  する．
\item{\bf 利用アプリケーション，サービス}\\
  　サービスを提供するサーバのアドレスブロックを用意し，ホストが通信し
  たサーバと照らし合わせることでホストが利用しているアプリケーションや
  サービスを特定する．また，ソフトウェアだけでなくOSもUpdateの通信も対
  象とする．

\end{itemize} 

\subsection{検証環境}
\label{evaluation:packet:env}
2009年9月7日（月）から10日（木）にかけて，長野県長野市松代町にて開催さ
れたWIDE合宿におけるネットワークで実験を行った．
合宿ネットワークはは200台以上のホストが参加しており，所属するコミュニティも様々
である．
そのWIDE合宿ネットワークトポロジ図を図\ref{fig:wide_net}に示す．
\begin{figure}
    \begin{center}
      \includegraphics[scale=0.50]{./pdf/wide_top}
      \caption{WIDE合宿ネットワークトポロジ図}
      \label{fig:wide_net}
    \end{center}
\end{figure}
このネットワークですべての無線を利用したホストのパケットヘッダ情
報を利用してホストの識別を行う．
合宿でパケットを取得した期間は2009年9月7日17時44分から9月9日16時8分までである．

%もうひとつの環境は，筆者の所属する研究室で同じグループのメンバー十数名
%の許可を得て，パケット情報を取得する．研究室のネットワークの一部を利用
%して，特定のスイッチを利用した場合に，トラフィックを収集するようにする．
%図\ref{fig:nakajima_net}に実験用ネットワークのトポロジを記す．
%
%\begin{figure}
%    \begin{center}
%      \includegraphics[scale=0.50]{./pdf/nakajima_network}
%      \caption{研究室験用ネットワーク概要図}
%      \label{fig:nakajima_net}
%    \end{center}
%\end{figure}
%
%前述したWIDE合宿ネットワークとの違いは，同じコミュニティに所属するユー
%ザのホストを利用できるかを目的としている．
%

\subsection{検証結果}
\label{evaluation:packet:res}
%\begin{itemize}
%\item{\bf WIDE合宿ネットワーク}\\

\begin{table}
\caption{WIDE合宿ネットワークにおける実験結果}
\label{tb:head_result}
\begin{center}
{\footnotesize
\begin{tabular}{|*{7}{l|}}
%1mail 2keio 3google,4other
%1cpu kccx 3other
\hline
識別要素＼ホスト&$H_1$&$H_2$&$H_3$&$H_4$&$H_5$&$H_6$\\
\hline
Mail Server   &$S_1$,$S_2$&$S_1$,$S_2$&$S_6$&$S_1$,$S_2$&$S_2$&$S_1$,$S_2$\\
              &$S_3$&$S_4$,$S_5$&  &  &  &  \\
\hline
SSH Server    &$S_1$,$S_3$&$S_1$,$S_6$&$S_1$&&&\\
              &$S_4$,$S_5$&$S_7$,$S_8$&  &  &  &  \\
              &     &$S_9$&  &  &  &  \\
\hline
パケット間隔から  &MacOS&MacOS&Windows&MacOS&Windows&MacOS\\
推測されるOS  &&&&&&\\
\hline
送信元ポート&49152-65535&49152-65535&1024-5000&49152-65535&49152-65535&49152-65535\\
\hline
IRC Server&&&$S_1$,$S_2$&&&\\
          &&&$S_3$,$S_4$&&&\\
\hline
特徴的な挙動&定期的な&&&&特殊な&VPN，\\
        &HTTP通信&&&&発信元&定期的に\\
        &　　　　&&&&ポート利用  &HTTP通信\\
\hline
MSNのリスト量&5383&1972&8862&13166&&1362\\
\hline
起動時の挙動&HTTP通信&&HTTP通信&MSN&        HTTP通信&\\
            &IMAP接続&&        &メッセンジャ&&\\
\hline
Update&Evernote&MacOS&Windows&MacOS&Firefox&MacOS\\
      &MacOS   &     &       &     &Quick Time&Safari\\
\hline

\end{tabular}
}
\end{center}
{\bf H}:ホスト {\bf S}:サーバ\\
\end{table}

\subsubsection{ホストの分類}
WIDE合宿におけるネットワークから6台のホストを分類できるかという検証に
おいて，識別要素による手法を用いた．表\ref{tb:head_result}に，
実験結果を示す．

まず，SSHとIMAPにおける宛先ホストを分類した．特定の
コミュニティに所属しているユーザは同じサーバを利用する傾向にあるため，
宛先ホストを閲覧するだけで容易に分類が可能である．これによって，200台以上の
ホストから13台まで絞ることができる．更に，SSH，IMAP利用者においてトラフィッ
ク受信量を識別要素とした場合，12台のユーザの特徴付けを行った．SSHとIMAPの
接続先で12台のユーザは各々に分類出来る．

IMAPの接続先に焦点を当てると，大きく3台のMailサーバが利用されていること
が分かる．更に詳しく解析すると，$H_1$,$H_2は$多くのメールサーバとやり取
りする傾向があるのに対して，$H_3$は複数のアカウントを外部メールサーバで
統合している可能性が高い．そして，SSHの接続先を見ると，$H_1$,$H_2$は複
数のホストを利用している．SSHとIMAPを利用するだけで各ユーザの分類は可能で
ある．

次に，メッセンジャやIRCを利用しているユーザを分類した．メッセンジャを利
用する場合，通信を行う相手のリストをやり取りする．そのリストのトラフィッ
ク量(byte)をユーザごとに分けた．メッセンジャのユーザリストは増減するた
め，100byte程度の幅を持っている．これによって，MSNメッセンジャを利用し
ているユーザすべての特徴を抽出することができた．また，ネットワーク会場
の関係上，ホストをサスペンドをするユーザが多くいたため，復旧時の時間と
送信元ポートを利用することによって，継続してユーザをトラッキングするこ
とができた．

起動時のパケットとソースポート番号を観測することによって5台がMacOSであ
り，2台がWindowsであることが分かった．そして，ネットワーク接続時にOSや
ソフトウェアのUpdateを確認しているか監視した．その際
に，FireFoxを利用しているユーザが4名発見されている．
また，アプリケーション利用時に発生するトラフィックか
ら，Evernote\cite{evernote:2010}などを起動時に設定しているホストも判明
している．

特徴的な通信について述べる．$H_1$は起動時から一定時間ごとに同じサーバに
対してHTTPでデータを送信する傾向がある．このことから，何らかのアプリ
ケーションが起動していることがわかる．今回は，アプリケーション利用時の通
信サーバのアドレスブロックを保持していると仮定しているため，このアプリ
ケーションがEvernoteであると判明している．同じく$H_6$も起動時から同じサー
バにアクセスし続けているため，常駐アプリを自動起動に設定していると言え
る．$H_5$では発信元ポート番号の傾向が49125-65535番を利用するOSであるが，
発信元ポート番号1444を何度も連続して常に利用している．このため，特殊な
サービスを利用していると推測できる．また，起動時に毎回HTTPを利用したダ
ウンロードしているのが観測された．$H_5$は起動時のパケットのタイミングか
らWindowsであることが判明しているため，アンチウイルスソフトのシグネチャ
の更新である可能性が高い．実際に通信先IPアドレスからAvastと呼ばれるアン
チウイルスソフトを利用していると判断された．$H_6$では，VPNを利用すると
ともに起動時から定期的なHTTP通信をしている．これら識別要素をもとにホス
トを分類することで，ホストごとの特徴を分けて表すことができる．それらの
識別要素を，分類した結果6台中6台すべてを一意に分類することができた．

\subsubsection{ホストの識別}
ホストを分類することで得た識別要素を利用して，ホスト識別する．識別に必
要な情報はMail サーバもしくはSSH サーバへのアクセスである．これによっ
て，200台以上あるホスト群から10台前後に特定出来るため，この接続先とポー
ト番号のセットは不可欠である．その識別要素と更に別の情報を加えることで
初めてホストを個別に識別できる．ポート番号と接続先の組み合わせ以外に
は，MSNメッセンジャのトラフィック量が有用である．これは，メッセンジャの
場合，連絡先のリストの数はユーザごとに異なる可能性が高いため，ホスト識
別に利用しやすい．また，起動時の挙動から，一定のホストにアクセスをする
ために，利用アプリケーションを要素とすることで識別できる．

%\item{\bf 研究室実験ネットワーク}\\
%評価中！！


%\end{itemize}

\subsection{考察}
宛先ホスト，プロトコル，利用アプリケーション，起動時の挙動，パケットの
タイミングをもとに，すべてのユーザを識別することができた．IMAPやMSNMSのト
ラフィック量からホストを識別する手法は有効である．また，サスペンドから
の復旧を追跡するために送信元ポートを利用する手法も有効であることが示せ
た．そして，継続的にホスト追跡することで，アプリケーションのアップデー
トや固有の通信を得ることで，ホストのプロファイル作成ができる．このよう
に様々な情報を組み合わせることで，パケットのヘッダ情報だけでもホストの
識別は可能である．

しかし，IMAPやMSNメッセンジャのプロトコルは，ユーザの利用頻度やHTTPを通
じて利用されるなど，ユーザの振る舞いに大きく変化していしまうため，識別
要素としてなり難い．また，サービスを特定するために，サービスするアドレ
スブロックを保持しているが，アドレス範囲が不明な場合，本システムの識別
要素として利用している情報が取れない場合があることが分かった．今後，精
度をあげるために，より多くの識別要素を追加する必要がある．


%%% Local Variables:
%%% mode: japanese-latex
%%% TeX-master: "../nakajima_bthesis"
%%% End:
